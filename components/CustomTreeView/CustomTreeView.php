<?php
namespace  app\components\CustomTreeView;

use kartik\base\Config;
use kartik\tree\models\Tree;
use kartik\tree\Module;
use kartik\tree\TreeSecurity;
use kartik\tree\TreeView;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;

class CustomTreeView extends TreeView
{

    /**
     * @throws \yii\base\InvalidConfigException
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @var null[]
     */
    public $nodeViewButtonLabels = ['submit' => null, 'reset' => null ,'print' => null];

    /**
     * @throws \yii\base\InvalidConfigException
     */
    protected function initTreeView()
    {
        if (empty($this->nodeTitle)) {
            $this->nodeTitle = Yii::t('kvtree', 'node');
        }
        if (empty($this->nodeTitlePlural)) {
            $this->nodeTitlePlural = Yii::t('kvtree', 'nodes');
        }
        $this->validateSourceData();
        $this->_module = Config::initModule(Module::class);
        if (!isset($this->bsVersion) && isset($this->_module->bsVersion)) {
            $this->bsVersion = $this->_module->bsVersion;
        }
        $this->initBsVersion();
        $isBs4 = $this->isBs4();
        $prefix = $this->getDefaultIconPrefix();
        $defaultBtnCss = $this->getDefaultBtnCss();
        if (empty($this->emptyNodeMsg)) {
            $this->emptyNodeMsg = Yii::t(
                'kvtree',
                'No valid {nodes} are available for display. Use toolbar buttons to add {nodes}.',
                ['node' => $this->nodeTitle, 'nodes' => $this->nodeTitlePlural]
            );
        }

        if (!isset($this->nodeViewButtonLabels['submit'])) {
            $this->nodeViewButtonLabels['submit'] = Html::tag('i', '',
                ['class' => $prefix . ($isBs4 ? 'save' : 'floppy-disk')]);
        }
        if (!isset($this->nodeViewButtonLabels['reset'])) {
            $this->nodeViewButtonLabels['reset'] = Html::tag('i', '',
                ['class' => $prefix . ($isBs4 ? 'redo' : 'repeat')]);
        }
        if (!isset($this->nodeViewButtonLabels['print'])) {
            $this->nodeViewButtonLabels['print'] = Html::tag('i', '',
                ['class' => $prefix . "print"]);
        }
        if (!isset($this->buttonOptions['class'])) {
            $this->buttonOptions['class'] = 'btn ' . $defaultBtnCss;
        }
        $this->_hasBootstrap = $this->showTooltips;
        $this->breadcrumbs += [
            'depth' => '',
            'glue' => ' &raquo; ',
            'activeCss' => 'kv-crumb-active',
            'untitled' => Yii::t('kvtree', 'Untitled'),
        ];
    }


    /**
     * @return string|void
     * @throws \yii\base\InvalidConfigException
     */
    public function run()
    {
        parent::run();
    }
    public function renderDetail()
    {
        /**
         * @var Tree $modelClass
         * @var Tree $node
         */
        $modelClass = $this->query->modelClass;
        $node = $this->displayValue ? $modelClass::findOne($this->displayValue) : null;
        if (empty($node)) {
            $node = new $modelClass;
        }
        $iconTypeAttribute = ArrayHelper::getValue($this->_module->dataStructure, 'iconTypeAttribute', 'icon_type');
        if ($this->_nodeIconsList !== false) {
            $node->$iconTypeAttribute = ArrayHelper::getValue($this->iconEditSettings, 'type', self::ICON_CSS);
        }
        $url = Yii::$app->request->url;
        $manageData = TreeSecurity::parseManageData([
            'formOptions' => $this->nodeFormOptions,
            'hideCssClass' => $this->hideCssClass,
            'modelClass' => $modelClass,
            'formAction' => $this->nodeActions[Module::NODE_SAVE],
            'currUrl' => $url,
            'isAdmin' => $this->isAdmin,
            'iconsList' => $this->_nodeIconsList,
            'softDelete' => $this->softDelete,
            'allowNewRoots' => $this->allowNewRoots,
            'showFormButtons' => $this->showFormButtons,
            'showIDAttribute' => $this->showIDAttribute,
            'showNameAttribute' => $this->showNameAttribute,
            'nodeView' => $this->nodeView,
            'nodeAddlViews' => $this->nodeAddlViews,
            'nodeViewButtonLabels' => $this->nodeViewButtonLabels,
            'nodeViewParams' => serialize($this->nodeViewParams),
            'nodeSelected' => $this->_nodeSelected,
            'breadcrumbs' => $this->breadcrumbs,
            'noNodesMessage' => Html::tag('div', $this->emptyNodeMsg, $this->emptyNodeMsgOptions),
            'nodeTitle' => $this->nodeTitle,
            'nodeTitlePlural' => $this->nodeTitlePlural,
            'defaultBtnCss' => $this->getDefaultBtnCss(),
        ]);
        $removeData = TreeSecurity::parseRemoveData([
            'modelClass' => $modelClass,
            'softDelete' => $this->softDelete,
        ]);
        $moveData = TreeSecurity::parseMoveData([
            'modelClass' => $modelClass,
            'allowNewRoots' => $this->allowNewRoots,
        ]);
        $params = $this->_module->treeStructure + $this->_module->dataStructure + [
                'node' => $node,
                'treeManageHash' => $manageData['newHash'],
                'treeRemoveHash' => $removeData['newHash'],
                'treeMoveHash' => $moveData['newHash'],
            ] + $manageData['out'] + $this->nodeViewParams;
//            $this->nodeView = 'view';
        $content = $this->render($this->nodeView, ['params' => $params]);
        return Html::tag('div', $content, $this->detailOptions);
    }
}